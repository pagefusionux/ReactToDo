/*
* Redux: action generators
* */

import firebase, {firebaseRef, githubProvider} from 'app/firebase/';
import moment from 'moment';


/*
* What does redux-thunk do?
*
* Without redux-thunk, our action generators return only objects. This isn't useful when we need to do asynchronous
* calls. If we want to wait for a Firebase call to come back and then use the returned data inside of our action
* object there's no way to do that.
*
* With redux-thunk, the action generators return functions that can do this useful asynchronous stuff.
* */

export const setSearchText = (searchText) => {
  return {
    type: 'SET_SEARCH_TEXT',
    searchText
  };
};

export const toggleShowCompleted = () => {
  return {
    type: 'TOGGLE_SHOW_COMPLETED'
  }
};

export const addTodo = (todo) => {
  return {
    type: 'ADD_TODO',
    todo
  }
};

export const startAddTodo = (text) => {
  return (dispatch, getState) => { // dispatch to Firebase
    const todo = {
      //id: uuid(), // ID generated by Firebase, not needed
      text,
      completed: false,
      createdAt: moment().unix(),
      completedAt: null
    };
    const todoRef = firebaseRef.child('todos').push(todo); // object now added to Firebase

    // now, update store which will update the browser output
    return todoRef.then(() => { // return to chain then() promise
      dispatch(addTodo({
        ...todo,
        id: todoRef.key
      }));
    });
  };
};

export const updateTodo = (id, updates) => {
  return {
    type: 'UPDATE_TODO',
    id,
    updates
  };
};

export const addTodos = (todos) => {
  return {
    type: 'ADD_TODOS',
    todos
  };
};

export const startAddTodos = () => {
  return (dispatch, getState) => {
    let todosRef = firebaseRef.child('todos');

    return todosRef.once('value').then((snapshot) => {
      let todos = snapshot.val() || {};
      let parsedTodos = []; // pass to redux (because it expects an array of todos)

      // convert returned firebase object to array
      Object.keys(todos).forEach((todoId) => {
        parsedTodos.push({
          id: todoId,
          ...todos[todoId]
        });
      });

      dispatch(addTodos(parsedTodos)); // pass firebase data to app for display
    });
  };
};

export const startToggleTodo = (id, completed) => {
  return (dispatch, getState) => {
    const todoRef = firebaseRef.child(`todos/${id}`);
    const updates = {
      completed,
      completedAt: completed ? moment().unix() : null
    };

    return todoRef.update(updates).then(() => { // reflect the update in the app
      dispatch(updateTodo(id, updates));
    });

  };
};

export const login = (uid) => {
  return {
    type: 'LOGIN',
    uid
  };
};

export const startLogin = () => {
  return (dispatch, getState) => {
    return firebase.auth().signInWithPopup(githubProvider).then((result) => {
      console.log('Auth worked!', result);
    }, (error) => {
      console.log('Unable to auth!', error);
    });

  };
};

export const logout = () => {
  return {
    type: 'LOGOUT'
  };
};

export const startLogout = () => {
  return (dispatch, getState) => {
    return firebase.auth().signOut().then(() => {
      console.log('Logged out!');
    });
  };
};


