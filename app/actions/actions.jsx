/*
* Redux: action generators
* */

import firebase, {firebaseRef} from 'app/firebase/';
import moment from 'moment';

/*
* What does redux-thunk do?
*
* Without redux-thunk, our action generators return only objects. This isn't useful when we need to do asynchronous
* calls. If we want to wait for a Firebase call to come back and then use the returned data inside of our action
* object there's no way to do that.
*
* With redux-thunk, the action generators return functions that can do this useful asynchronous stuff.
* */

export const setSearchText = (searchText) => {
  return {
    type: 'SET_SEARCH_TEXT',
    searchText
  };
};

export const toggleShowCompleted = () => {
  return {
    type: 'TOGGLE_SHOW_COMPLETED'
  }
};

export const addTodo = (todo) => {
  return {
    type: 'ADD_TODO',
    todo
  }
};

export const startAddTodo = (text) => {
  return (dispatch, getState) => { // dispatch to Firebase
    const todo = {
      //id: uuid(), // ID generated by Firebase, not needed
      text,
      completed: false,
      createdAt: moment().unix(),
      completedAt: null
    };
    const todoRef = firebaseRef.child('todos').push(todo); // object now added to Firebase

    // now, update store which will update the browser output
    return todoRef.then(() => { // return to chain then() promise
      dispatch(addTodo({
        ...todo,
        id: todoRef.key
      }));
    });
  };
};

export const toggleTodo = (id) => {
  return {
    type: 'TOGGLE_TODO',
    id
  };
};

export const addTodos = (todos) => {
  return {
    type: 'ADD_TODOS',
    todos
  };
};
